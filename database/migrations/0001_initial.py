# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-04-07 17:26
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Air',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barometric_press', models.FloatField(blank=True, null=True)),
                ('carb_dioxide', models.FloatField(blank=True, null=True)),
                ('carb_monoxide', models.FloatField(blank=True, null=True)),
                ('chem_admin_term', models.CharField(blank=True, max_length=90)),
                ('chem_admin_time', models.CharField(blank=True, max_length=90)),
                ('elev', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('methane', models.FloatField(blank=True, null=True)),
                ('organism_type', models.CharField(blank=True, max_length=90)),
                ('organism_count', models.FloatField(blank=True, null=True)),
                ('oxy_stat_samp', models.CharField(blank=True, max_length=90)),
                ('oxygen', models.FloatField(blank=True, null=True)),
                ('perturbation_type', models.CharField(blank=True, max_length=90)),
                ('perturbation_interval', models.CharField(blank=True, max_length=90)),
                ('pollutants_type', models.CharField(blank=True, max_length=90)),
                ('pollutants_concentration', models.FloatField(blank=True, null=True)),
                ('rel_to_oxygen', models.CharField(blank=True, max_length=90)),
                ('resp_part_matter_substance', models.CharField(blank=True, max_length=90)),
                ('resp_part_matter_concentration', models.FloatField(blank=True, null=True)),
                ('samp_collect_device', models.CharField(blank=True, max_length=90)),
                ('samp_mat_process', models.CharField(blank=True, max_length=90)),
                ('samp_salinity', models.FloatField(blank=True, null=True)),
                ('samp_size', models.FloatField(blank=True, null=True)),
                ('samp_store_dur', models.FloatField(blank=True, null=True)),
                ('samp_store_loc', models.CharField(blank=True, max_length=90)),
                ('samp_store_temp', models.FloatField(blank=True, null=True)),
                ('solar_irradiance', models.FloatField(blank=True, null=True)),
                ('temp', models.FloatField(blank=True, null=True)),
                ('ventilation_rate', models.FloatField(blank=True, null=True)),
                ('ventilation_type', models.CharField(blank=True, max_length=90)),
                ('volatile_org_comp_name', models.CharField(blank=True, max_length=90)),
                ('volatile_org_comp_concentration', models.FloatField(blank=True, null=True)),
                ('wind_direction', models.CharField(blank=True, max_length=90)),
                ('wind_speed', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('classid', models.TextField(primary_key=True, serialize=False)),
                ('className', models.CharField(blank=True, max_length=90)),
            ],
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('familyid', models.TextField(primary_key=True, serialize=False)),
                ('familyName', models.CharField(blank=True, max_length=90)),
                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Class')),
            ],
        ),
        migrations.CreateModel(
            name='Genus',
            fields=[
                ('genusid', models.TextField(primary_key=True, serialize=False)),
                ('genusName', models.CharField(blank=True, max_length=90)),
                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Class')),
                ('familyid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Family')),
            ],
        ),
        migrations.CreateModel(
            name='Human_Associated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('samp_collect_device', models.CharField(blank=True, max_length=90)),
                ('samp_mat_process', models.CharField(blank=True, max_length=90)),
                ('samp_size', models.FloatField(blank=True, null=True)),
                ('samp_store_dur', models.FloatField(blank=True, null=True)),
                ('samp_store_loc', models.CharField(blank=True, max_length=90)),
                ('samp_store_temp', models.FloatField(blank=True, null=True)),
                ('samp_type', models.CharField(blank=True, max_length=90)),
                ('samp_location', models.CharField(blank=True, max_length=90)),
                ('samp_temp', models.FloatField(blank=True, null=True)),
                ('samp_ph', models.FloatField(blank=True, null=True)),
                ('samp_oxy_stat', models.CharField(blank=True, max_length=90)),
                ('samp_salinity', models.FloatField(blank=True, null=True)),
                ('host_subject_id', models.CharField(blank=True, max_length=90)),
                ('host_age', models.FloatField(blank=True, null=True)),
                ('host_pulse', models.FloatField(blank=True, null=True)),
                ('host_gender', models.CharField(blank=True, max_length=90)),
                ('host_ethnicity', models.CharField(blank=True, max_length=90)),
                ('host_height', models.FloatField(blank=True, null=True)),
                ('host_weight', models.FloatField(blank=True, null=True)),
                ('host_bmi', models.FloatField(blank=True, null=True)),
                ('host_weight_loss_3_month', models.FloatField(blank=True, null=True)),
                ('host_body_temp', models.FloatField(blank=True, null=True)),
                ('host_occupation', models.CharField(blank=True, max_length=90)),
                ('pet_farm_animal', models.CharField(blank=True, max_length=90)),
                ('obesity', models.CharField(blank=True, max_length=90)),
                ('smoker', models.CharField(blank=True, max_length=90)),
                ('diet_type', models.CharField(blank=True, max_length=90)),
                ('diet_duration', models.FloatField(blank=True, null=True)),
                ('diet_frequency', models.CharField(blank=True, max_length=90)),
                ('diet_last_six_month', models.CharField(blank=True, max_length=90)),
                ('last_meal', models.CharField(blank=True, max_length=90)),
                ('medic_hist_perform', models.CharField(blank=True, max_length=90)),
                ('disease_type', models.CharField(blank=True, max_length=90)),
                ('disease_location', models.CharField(blank=True, max_length=90)),
                ('disease_duration', models.FloatField(blank=True, null=True)),
                ('organism_count', models.FloatField(blank=True, null=True)),
                ('tumor_location', models.CharField(blank=True, max_length=90)),
                ('tumor_mass', models.FloatField(blank=True, null=True)),
                ('tumor_stage', models.CharField(blank=True, max_length=90)),
                ('drug_usage', models.CharField(blank=True, max_length=90)),
                ('drug_type', models.CharField(blank=True, max_length=90)),
                ('drug_duration', models.FloatField(blank=True, null=True)),
                ('drug_frequency', models.CharField(blank=True, max_length=90)),
                ('perturbation', models.CharField(blank=True, max_length=90)),
                ('pert_type', models.CharField(blank=True, max_length=90)),
                ('pert_duration', models.FloatField(blank=True, null=True)),
                ('pert_frequency', models.CharField(blank=True, max_length=90)),
                ('fetal_health_stat', models.CharField(blank=True, max_length=90)),
                ('amniotic_fluid_color', models.CharField(blank=True, max_length=90)),
                ('gestation_stat', models.CharField(blank=True, max_length=90)),
                ('maternal_health_stat', models.CharField(blank=True, max_length=90)),
            ],
        ),
        migrations.CreateModel(
            name='Kingdom',
            fields=[
                ('kingdomid', models.TextField(primary_key=True, serialize=False)),
                ('kingdomName', models.CharField(blank=True, max_length=90)),
            ],
        ),
        migrations.CreateModel(
            name='ko_entry',
            fields=[
                ('ko_lvl4_id', models.TextField(primary_key=True, serialize=False)),
                ('ko_orthology', models.TextField(blank=True)),
                ('ko_name', models.TextField(blank=True)),
                ('ko_desc', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ko_lvl1',
            fields=[
                ('ko_lvl1_id', models.TextField(primary_key=True, serialize=False)),
                ('ko_lvl1_name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ko_lvl2',
            fields=[
                ('ko_lvl2_id', models.TextField(primary_key=True, serialize=False)),
                ('ko_lvl2_name', models.TextField()),
                ('ko_lvl1_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.ko_lvl1')),
            ],
        ),
        migrations.CreateModel(
            name='ko_lvl3',
            fields=[
                ('ko_lvl3_id', models.TextField(primary_key=True, serialize=False)),
                ('ko_lvl3_name', models.TextField()),
                ('ko_lvl1_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.ko_lvl1')),
                ('ko_lvl2_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.ko_lvl2')),
            ],
        ),
        migrations.CreateModel(
            name='Microbial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alkalinity', models.FloatField(blank=True, null=True)),
                ('alkyl_diethers', models.FloatField(blank=True, null=True)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('aminopept_act', models.FloatField(blank=True, null=True)),
                ('ammonium', models.FloatField(blank=True, null=True)),
                ('bacteria_carb_prod', models.FloatField(blank=True, null=True)),
                ('biomass_part_name', models.CharField(blank=True, max_length=90)),
                ('biomass_amount', models.FloatField(blank=True, null=True)),
                ('bishomohopanol', models.FloatField(blank=True, null=True)),
                ('bromide', models.FloatField(blank=True, null=True)),
                ('calcium', models.FloatField(blank=True, null=True)),
                ('carb_nitro_ratio', models.FloatField(blank=True, null=True)),
                ('chem_administration_term', models.CharField(blank=True, max_length=90)),
                ('chem_administration_time', models.CharField(blank=True, max_length=90)),
                ('chloride', models.FloatField(blank=True, null=True)),
                ('chlorophyll', models.FloatField(blank=True, null=True)),
                ('diether_lipids_name', models.CharField(blank=True, max_length=90)),
                ('diether_lipids_concentration', models.FloatField(blank=True, null=True)),
                ('diss_carb_dioxide', models.FloatField(blank=True, null=True)),
                ('diss_hydrogen', models.FloatField(blank=True, null=True)),
                ('diss_inorg_carb', models.FloatField(blank=True, null=True)),
                ('diss_org_carb', models.FloatField(blank=True, null=True)),
                ('diss_org_nitro', models.FloatField(blank=True, null=True)),
                ('diss_oxygen', models.FloatField(blank=True, null=True)),
                ('glucosidase_act', models.FloatField(blank=True, null=True)),
                ('magnesium', models.FloatField(blank=True, null=True)),
                ('mean_frict_vel', models.FloatField(blank=True, null=True)),
                ('mean_peak_frict_vel', models.FloatField(blank=True, null=True)),
                ('methane', models.FloatField(blank=True, null=True)),
                ('n_alkanes_name', models.CharField(blank=True, max_length=90)),
                ('n_alkanes_concentration', models.FloatField(blank=True, null=True)),
                ('nitrate', models.FloatField(blank=True, null=True)),
                ('nitrite', models.FloatField(blank=True, null=True)),
                ('nitro', models.FloatField(blank=True, null=True)),
                ('org_carb', models.FloatField(blank=True, null=True)),
                ('org_matter', models.FloatField(blank=True, null=True)),
                ('org_nitro', models.FloatField(blank=True, null=True)),
                ('organism_name', models.CharField(blank=True, max_length=90)),
                ('organism_count', models.FloatField(blank=True, null=True)),
                ('oxy_stat_samp', models.CharField(blank=True, max_length=90)),
                ('part_org_carb', models.FloatField(blank=True, null=True)),
                ('perturbation_type', models.CharField(blank=True, max_length=90)),
                ('perturbation_interval', models.CharField(blank=True, max_length=90)),
                ('petroleum_hydrocarb', models.FloatField(blank=True, null=True)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('phaeopigments_type', models.CharField(blank=True, max_length=90)),
                ('phaeopigments_concentration', models.FloatField(blank=True, null=True)),
                ('phosphate', models.FloatField(blank=True, null=True)),
                ('phosplipid_fatt_acid_name', models.CharField(blank=True, max_length=90)),
                ('phosplipid_fatt_acid_concentration', models.FloatField(blank=True, null=True)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('pressure', models.FloatField(blank=True, null=True)),
                ('redox_potential', models.FloatField(blank=True, null=True)),
                ('rel_to_oxygen', models.CharField(blank=True, max_length=90)),
                ('salinity', models.FloatField(blank=True, null=True)),
                ('samp_collect_device', models.CharField(blank=True, max_length=90)),
                ('samp_mat_process', models.CharField(blank=True, max_length=90)),
                ('samp_size', models.FloatField(blank=True, null=True)),
                ('samp_store_dur', models.FloatField(blank=True, null=True)),
                ('samp_store_loc', models.CharField(blank=True, max_length=90)),
                ('samp_store_temp', models.FloatField(blank=True, null=True)),
                ('silicate', models.FloatField(blank=True, null=True)),
                ('sodium', models.FloatField(blank=True, null=True)),
                ('sulfate', models.FloatField(blank=True, null=True)),
                ('sulfide', models.FloatField(blank=True, null=True)),
                ('temp', models.FloatField(blank=True, null=True)),
                ('tot_carb', models.FloatField(blank=True, null=True)),
                ('tot_nitro', models.FloatField(blank=True, null=True)),
                ('tot_org_carb', models.FloatField(blank=True, null=True)),
                ('turbidity', models.FloatField(blank=True, null=True)),
                ('water_content', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='nz_entry',
            fields=[
                ('nz_lvl5_id', models.TextField(primary_key=True, serialize=False)),
                ('nz_orthology', models.TextField(blank=True)),
                ('nz_name', models.TextField(blank=True)),
                ('nz_desc', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='nz_lvl1',
            fields=[
                ('nz_lvl1_id', models.TextField(primary_key=True, serialize=False)),
                ('nz_lvl1_name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='nz_lvl2',
            fields=[
                ('nz_lvl2_id', models.TextField(primary_key=True, serialize=False)),
                ('nz_lvl2_name', models.TextField()),
                ('nz_lvl1_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl1')),
            ],
        ),
        migrations.CreateModel(
            name='nz_lvl3',
            fields=[
                ('nz_lvl3_id', models.TextField(primary_key=True, serialize=False)),
                ('nz_lvl3_name', models.TextField()),
                ('nz_lvl1_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl1')),
                ('nz_lvl2_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl2')),
            ],
        ),
        migrations.CreateModel(
            name='nz_lvl4',
            fields=[
                ('nz_lvl4_id', models.TextField(primary_key=True, serialize=False)),
                ('nz_lvl4_name', models.TextField()),
                ('nz_lvl1_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl1')),
                ('nz_lvl2_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl2')),
                ('nz_lvl3_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl3')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('orderid', models.TextField(primary_key=True, serialize=False)),
                ('orderName', models.CharField(blank=True, max_length=90)),
                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Class')),
                ('kingdomid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Kingdom')),
            ],
        ),
        migrations.CreateModel(
            name='Phyla',
            fields=[
                ('phylaid', models.TextField(primary_key=True, serialize=False)),
                ('phylaName', models.CharField(blank=True, max_length=90)),
                ('kingdomid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Kingdom')),
            ],
        ),
        migrations.CreateModel(
            name='PICRUSt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geneCount', jsonfield.fields.JSONField(default={})),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Class')),
                ('familyid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Family')),
                ('genusid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Genus')),
                ('kingdomid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Kingdom')),
                ('orderid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Order')),
                ('phylaid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Phyla')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('projectid', models.TextField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=15)),
                ('projectType', models.CharField(max_length=90)),
                ('project_name', models.TextField(blank=True)),
                ('project_desc', models.TextField(blank=True)),
                ('start_date', models.CharField(blank=True, max_length=15)),
                ('end_date', models.CharField(blank=True, max_length=15)),
                ('pi_last', models.TextField(blank=True)),
                ('pi_first', models.TextField(blank=True)),
                ('pi_affiliation', models.CharField(blank=True, max_length=90)),
                ('pi_email', models.EmailField(blank=True, max_length=254)),
                ('pi_phone', models.CharField(blank=True, max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('refid', models.TextField(primary_key=True, serialize=False)),
                ('raw', models.BooleanField()),
                ('path', models.CharField(max_length=90)),
                ('source', models.CharField(max_length=90)),
                ('alignDB', models.CharField(blank=True, max_length=90)),
                ('templateDB', models.CharField(blank=True, max_length=90)),
                ('taxonomyDB', models.CharField(blank=True, max_length=90)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to=settings.AUTH_USER_MODEL)),
                ('projectid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Project')),
            ],
            options={
                'verbose_name_plural': 'entries',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('sampleid', models.TextField(primary_key=True, serialize=False)),
                ('sample_name', models.TextField()),
                ('organism', models.CharField(blank=True, max_length=90)),
                ('collection_date', models.CharField(blank=True, max_length=15)),
                ('depth', models.CharField(blank=True, max_length=90)),
                ('elev', models.CharField(blank=True, max_length=90)),
                ('seq_platform', models.CharField(blank=True, max_length=90)),
                ('seq_gene', models.CharField(blank=True, max_length=90)),
                ('seq_gene_region', models.CharField(blank=True, max_length=90)),
                ('seq_barcode', models.CharField(blank=True, max_length=90)),
                ('seq_for_primer', models.CharField(blank=True, max_length=90)),
                ('seq_rev_primer', models.CharField(blank=True, max_length=90)),
                ('env_biome', models.CharField(blank=True, max_length=90)),
                ('env_feature', models.CharField(blank=True, max_length=90)),
                ('env_material', models.CharField(blank=True, max_length=90)),
                ('geo_loc_country', models.CharField(blank=True, max_length=90)),
                ('geo_loc_state', models.CharField(blank=True, max_length=90)),
                ('geo_loc_city', models.CharField(blank=True, max_length=90)),
                ('geo_loc_farm', models.CharField(blank=True, max_length=90)),
                ('geo_loc_plot', models.CharField(blank=True, max_length=90)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('annual_season_precpt', models.FloatField(blank=True, null=True)),
                ('annual_season_temp', models.FloatField(blank=True, null=True)),
                ('projectid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Project')),
                ('refid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Reference')),
            ],
        ),
        migrations.CreateModel(
            name='Soil',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('samp_collection_device', models.CharField(blank=True, max_length=90)),
                ('samp_size', models.FloatField(blank=True, null=True)),
                ('samp_depth', models.CharField(blank=True, max_length=90)),
                ('samp_prep', models.CharField(blank=True, max_length=90)),
                ('samp_sieve_size', models.FloatField(blank=True, null=True)),
                ('samp_store_dur', models.FloatField(blank=True, null=True)),
                ('samp_store_loc', models.CharField(blank=True, max_length=90)),
                ('samp_store_temp', models.FloatField(blank=True, null=True)),
                ('samp_weight_dna_ext', models.FloatField(blank=True, null=True)),
                ('pool_dna_extracts', models.FloatField(blank=True, null=True)),
                ('fao_class', models.CharField(blank=True, max_length=90)),
                ('local_class', models.CharField(blank=True, max_length=90)),
                ('texture_class', models.CharField(blank=True, max_length=90)),
                ('porosity', models.FloatField(blank=True, null=True)),
                ('profile_position', models.CharField(blank=True, max_length=90)),
                ('slope_aspect', models.CharField(blank=True, max_length=90)),
                ('slope_gradient', models.FloatField(blank=True, null=True)),
                ('bulk_density', models.FloatField(blank=True, null=True)),
                ('drainage_class', models.CharField(blank=True, max_length=90)),
                ('water_content_soil', models.FloatField(blank=True, null=True)),
                ('cur_land_use', models.TextField(blank=True)),
                ('cur_vegetation', models.TextField(blank=True)),
                ('cur_crop', models.TextField(blank=True)),
                ('cur_cultivar', models.TextField(blank=True)),
                ('crop_rotation', models.TextField(blank=True)),
                ('cover_crop', models.TextField(blank=True)),
                ('fert_amendment_class', models.TextField(blank=True)),
                ('fert_placement', models.TextField(blank=True)),
                ('fert_type', models.TextField(blank=True)),
                ('fert_tot_amount', models.FloatField(blank=True, null=True)),
                ('fert_N_tot_amount', models.FloatField(blank=True, null=True)),
                ('fert_P_tot_amount', models.FloatField(blank=True, null=True)),
                ('fert_K_tot_amount', models.FloatField(blank=True, null=True)),
                ('irrigation_type', models.TextField(blank=True)),
                ('irrigation_tot_amount', models.FloatField(blank=True, null=True)),
                ('residue_removal', models.TextField(blank=True)),
                ('residue_growth_stage', models.TextField(blank=True)),
                ('residue_removal_percent', models.FloatField(blank=True, null=True)),
                ('tillage_event', models.TextField(blank=True)),
                ('tillage_event_depth', models.FloatField(blank=True, null=True)),
                ('amend1_class', models.TextField(blank=True)),
                ('amend1_active_ingredient', models.TextField(blank=True)),
                ('amend1_tot_amount', models.FloatField(blank=True, null=True)),
                ('amend2_class', models.TextField(blank=True)),
                ('amend2_active_ingredient', models.TextField(blank=True)),
                ('amend2_tot_amount', models.FloatField(blank=True, null=True)),
                ('amend3_class', models.TextField(blank=True)),
                ('amend3_active_ingredient', models.TextField(blank=True)),
                ('amend3_tot_amount', models.FloatField(blank=True, null=True)),
                ('rRNA_copies', models.FloatField(blank=True, null=True)),
                ('microbial_biomass_C', models.FloatField(blank=True, null=True)),
                ('microbial_biomass_N', models.FloatField(blank=True, null=True)),
                ('microbial_respiration', models.FloatField(blank=True, null=True)),
                ('soil_pH', models.FloatField(blank=True, null=True)),
                ('soil_EC', models.FloatField(blank=True, null=True)),
                ('soil_C', models.FloatField(blank=True, null=True)),
                ('soil_OM', models.FloatField(blank=True, null=True)),
                ('soil_N', models.FloatField(blank=True, null=True)),
                ('soil_NO3_N', models.FloatField(blank=True, null=True)),
                ('soil_NH4_N', models.FloatField(blank=True, null=True)),
                ('soil_P', models.FloatField(blank=True, null=True)),
                ('soil_K', models.FloatField(blank=True, null=True)),
                ('soil_S', models.FloatField(blank=True, null=True)),
                ('soil_Zn', models.FloatField(blank=True, null=True)),
                ('soil_Fe', models.FloatField(blank=True, null=True)),
                ('soil_Cu', models.FloatField(blank=True, null=True)),
                ('soil_Mn', models.FloatField(blank=True, null=True)),
                ('soil_Ca', models.FloatField(blank=True, null=True)),
                ('soil_Mg', models.FloatField(blank=True, null=True)),
                ('soil_Na', models.FloatField(blank=True, null=True)),
                ('soil_B', models.FloatField(blank=True, null=True)),
                ('plant_C', models.FloatField(blank=True, null=True)),
                ('plant_N', models.FloatField(blank=True, null=True)),
                ('plant_P', models.FloatField(blank=True, null=True)),
                ('plant_K', models.FloatField(blank=True, null=True)),
                ('plant_Ca', models.FloatField(blank=True, null=True)),
                ('plant_Mg', models.FloatField(blank=True, null=True)),
                ('plant_S', models.FloatField(blank=True, null=True)),
                ('plant_Na', models.FloatField(blank=True, null=True)),
                ('plant_Cl', models.FloatField(blank=True, null=True)),
                ('plant_Al', models.FloatField(blank=True, null=True)),
                ('plant_B', models.FloatField(blank=True, null=True)),
                ('plant_Cu', models.FloatField(blank=True, null=True)),
                ('plant_Fe', models.FloatField(blank=True, null=True)),
                ('plant_Mn', models.FloatField(blank=True, null=True)),
                ('plant_Zn', models.FloatField(blank=True, null=True)),
                ('crop_tot_biomass_fw', models.FloatField(blank=True, null=True)),
                ('crop_tot_biomass_dw', models.FloatField(blank=True, null=True)),
                ('crop_tot_above_biomass_fw', models.FloatField(blank=True, null=True)),
                ('crop_tot_above_biomass_dw', models.FloatField(blank=True, null=True)),
                ('crop_tot_below_biomass_fw', models.FloatField(blank=True, null=True)),
                ('crop_tot_below_biomass_dw', models.FloatField(blank=True, null=True)),
                ('harv_fraction', models.CharField(blank=True, max_length=90)),
                ('harv_fresh_weight', models.FloatField(blank=True, null=True)),
                ('harv_dry_weight', models.FloatField(blank=True, null=True)),
                ('ghg_chamber_placement', models.CharField(blank=True, max_length=45)),
                ('ghg_N2O', models.FloatField(blank=True, null=True)),
                ('ghg_CO2', models.FloatField(blank=True, null=True)),
                ('ghg_NH4', models.FloatField(blank=True, null=True)),
                ('projectid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Project')),
                ('refid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Reference')),
                ('sampleid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Sample')),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('speciesid', models.TextField(primary_key=True, serialize=False)),
                ('speciesName', models.CharField(blank=True, max_length=90)),
                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Class')),
                ('familyid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Family')),
                ('genusid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Genus')),
                ('kingdomid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Kingdom')),
                ('orderid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Order')),
                ('phylaid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Phyla')),
            ],
        ),
        migrations.CreateModel(
            name='UserDefined',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usr_cat1', models.TextField(blank=True)),
                ('usr_cat2', models.TextField(blank=True)),
                ('usr_cat3', models.TextField(blank=True)),
                ('usr_cat4', models.TextField(blank=True)),
                ('usr_cat5', models.TextField(blank=True)),
                ('usr_cat6', models.TextField(blank=True)),
                ('usr_quant1', models.FloatField(blank=True, null=True)),
                ('usr_quant2', models.FloatField(blank=True, null=True)),
                ('usr_quant3', models.FloatField(blank=True, null=True)),
                ('usr_quant4', models.FloatField(blank=True, null=True)),
                ('usr_quant5', models.FloatField(blank=True, null=True)),
                ('usr_quant6', models.FloatField(blank=True, null=True)),
                ('projectid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Project')),
                ('refid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Reference')),
                ('sampleid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Sample')),
            ],
        ),
        migrations.CreateModel(
            name='Water',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alkalinity', models.FloatField(blank=True, null=True)),
                ('alkyl_diethers', models.FloatField(blank=True, null=True)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('aminopept_act', models.FloatField(blank=True, null=True)),
                ('ammonium', models.FloatField(blank=True, null=True)),
                ('atmospheric_data', models.FloatField(blank=True, null=True)),
                ('bac_prod', models.FloatField(blank=True, null=True)),
                ('bac_resp', models.FloatField(blank=True, null=True)),
                ('bacteria_carb_prod', models.FloatField(blank=True, null=True)),
                ('biomass_part_name', models.CharField(blank=True, max_length=90)),
                ('biomass_amount', models.FloatField(blank=True, null=True)),
                ('bishomohopanol', models.FloatField(blank=True, null=True)),
                ('bromide', models.FloatField(blank=True, null=True)),
                ('calcium', models.FloatField(blank=True, null=True)),
                ('carb_nitro_ratio', models.FloatField(blank=True, null=True)),
                ('chem_administration_name', models.CharField(blank=True, max_length=90)),
                ('chem_administration_time', models.CharField(blank=True, max_length=90)),
                ('chloride', models.FloatField(blank=True, null=True)),
                ('chlorophyll', models.FloatField(blank=True, null=True)),
                ('conduc', models.FloatField(blank=True, null=True)),
                ('density', models.FloatField(blank=True, null=True)),
                ('diether_lipids', models.FloatField(blank=True, null=True)),
                ('diss_carb_dioxide', models.FloatField(blank=True, null=True)),
                ('diss_hydrogen', models.FloatField(blank=True, null=True)),
                ('diss_inorg_carb', models.FloatField(blank=True, null=True)),
                ('diss_inorg_nitro', models.FloatField(blank=True, null=True)),
                ('diss_inorg_phosp', models.FloatField(blank=True, null=True)),
                ('diss_org_carb', models.FloatField(blank=True, null=True)),
                ('diss_org_nitro', models.FloatField(blank=True, null=True)),
                ('diss_oxygen', models.FloatField(blank=True, null=True)),
                ('down_par', models.FloatField(blank=True, null=True)),
                ('elev', models.FloatField(blank=True, null=True)),
                ('fluor', models.FloatField(blank=True, null=True)),
                ('glucosidase_act', models.FloatField(blank=True, null=True)),
                ('light_intensity', models.FloatField(blank=True, null=True)),
                ('magnesium', models.FloatField(blank=True, null=True)),
                ('mean_frict_vel', models.FloatField(blank=True, null=True)),
                ('mean_peak_frict_vel', models.FloatField(blank=True, null=True)),
                ('n_alkanes', models.FloatField(blank=True, null=True)),
                ('nitrate', models.FloatField(blank=True, null=True)),
                ('nitrite', models.FloatField(blank=True, null=True)),
                ('nitro', models.FloatField(blank=True, null=True)),
                ('org_carb', models.FloatField(blank=True, null=True)),
                ('org_matter', models.FloatField(blank=True, null=True)),
                ('org_nitro', models.FloatField(blank=True, null=True)),
                ('organism_name', models.CharField(blank=True, max_length=90)),
                ('organism_count', models.FloatField(blank=True, null=True)),
                ('oxy_stat_samp', models.CharField(blank=True, max_length=90)),
                ('part_org_carb', models.FloatField(blank=True, null=True)),
                ('part_org_nitro', models.FloatField(blank=True, null=True)),
                ('perturbation_type', models.CharField(blank=True, max_length=90)),
                ('perturbation_interval', models.CharField(blank=True, max_length=90)),
                ('pretroleum_hydrocarb', models.FloatField(blank=True, null=True)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('phaeopigments', models.FloatField(blank=True, null=True)),
                ('phosphate', models.FloatField(blank=True, null=True)),
                ('phosplipid_fatt_acid', models.FloatField(blank=True, null=True)),
                ('photon_flux', models.FloatField(blank=True, null=True)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('pressure', models.FloatField(blank=True, null=True)),
                ('primary_prod', models.FloatField(blank=True, null=True)),
                ('redox_potential', models.FloatField(blank=True, null=True)),
                ('rel_to_oxygen', models.CharField(blank=True, max_length=90)),
                ('samp_mat_process', models.CharField(blank=True, max_length=90)),
                ('samp_salinity', models.FloatField(blank=True, null=True)),
                ('samp_size', models.FloatField(blank=True, null=True)),
                ('samp_store_dur', models.FloatField(blank=True, null=True)),
                ('samp_store_loc', models.CharField(blank=True, max_length=90)),
                ('samp_store_temp', models.FloatField(blank=True, null=True)),
                ('samp_vol_we_dna_ext', models.FloatField(blank=True, null=True)),
                ('silicate', models.FloatField(blank=True, null=True)),
                ('sodium', models.FloatField(blank=True, null=True)),
                ('soluble_react_phosp', models.FloatField(blank=True, null=True)),
                ('source_material_id', models.CharField(blank=True, max_length=90)),
                ('sulfate', models.FloatField(blank=True, null=True)),
                ('sulfide', models.FloatField(blank=True, null=True)),
                ('suspen_part_matter', models.FloatField(blank=True, null=True)),
                ('temp', models.FloatField(blank=True, null=True)),
                ('tidal_stage', models.CharField(blank=True, max_length=90)),
                ('tot_depth_water_col', models.FloatField(blank=True, null=True)),
                ('tot_diss_nitro', models.FloatField(blank=True, null=True)),
                ('tot_inorg_nitro', models.FloatField(blank=True, null=True)),
                ('tot_nitro', models.FloatField(blank=True, null=True)),
                ('tot_part_carb', models.FloatField(blank=True, null=True)),
                ('tot_phosp', models.FloatField(blank=True, null=True)),
                ('water_current_direction', models.CharField(blank=True, max_length=90)),
                ('water_current_magnitude', models.FloatField(blank=True, null=True)),
                ('projectid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Project')),
                ('refid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Reference')),
                ('sampleid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Sample')),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='projectid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Project'),
        ),
        migrations.AddField(
            model_name='profile',
            name='refid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Reference'),
        ),
        migrations.AddField(
            model_name='profile',
            name='sampleid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Sample'),
        ),
        migrations.AddField(
            model_name='profile',
            name='speciesid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Species'),
        ),
        migrations.AddField(
            model_name='picrust',
            name='speciesid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Species'),
        ),
        migrations.AddField(
            model_name='order',
            name='phylaid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Phyla'),
        ),
        migrations.AddField(
            model_name='nz_entry',
            name='nz_lvl1_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl1'),
        ),
        migrations.AddField(
            model_name='nz_entry',
            name='nz_lvl2_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl2'),
        ),
        migrations.AddField(
            model_name='nz_entry',
            name='nz_lvl3_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl3'),
        ),
        migrations.AddField(
            model_name='nz_entry',
            name='nz_lvl4_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.nz_lvl4'),
        ),
        migrations.AddField(
            model_name='microbial',
            name='projectid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Project'),
        ),
        migrations.AddField(
            model_name='microbial',
            name='refid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Reference'),
        ),
        migrations.AddField(
            model_name='microbial',
            name='sampleid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Sample'),
        ),
        migrations.AddField(
            model_name='ko_entry',
            name='ko_lvl1_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.ko_lvl1'),
        ),
        migrations.AddField(
            model_name='ko_entry',
            name='ko_lvl2_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.ko_lvl2'),
        ),
        migrations.AddField(
            model_name='ko_entry',
            name='ko_lvl3_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.ko_lvl3'),
        ),
        migrations.AddField(
            model_name='human_associated',
            name='projectid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Project'),
        ),
        migrations.AddField(
            model_name='human_associated',
            name='refid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Reference'),
        ),
        migrations.AddField(
            model_name='human_associated',
            name='sampleid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Sample'),
        ),
        migrations.AddField(
            model_name='genus',
            name='kingdomid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Kingdom'),
        ),
        migrations.AddField(
            model_name='genus',
            name='orderid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Order'),
        ),
        migrations.AddField(
            model_name='genus',
            name='phylaid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Phyla'),
        ),
        migrations.AddField(
            model_name='family',
            name='kingdomid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Kingdom'),
        ),
        migrations.AddField(
            model_name='family',
            name='orderid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Order'),
        ),
        migrations.AddField(
            model_name='family',
            name='phylaid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Phyla'),
        ),
        migrations.AddField(
            model_name='class',
            name='kingdomid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Kingdom'),
        ),
        migrations.AddField(
            model_name='class',
            name='phylaid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Phyla'),
        ),
        migrations.AddField(
            model_name='air',
            name='projectid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Project'),
        ),
        migrations.AddField(
            model_name='air',
            name='refid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Reference'),
        ),
        migrations.AddField(
            model_name='air',
            name='sampleid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Sample'),
        ),
    ]
