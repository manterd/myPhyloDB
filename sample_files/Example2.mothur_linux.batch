#########################################################
### Standard Linux Mothur batch file for myPhyloDB    ###
### Tunable parameters may be changed as necessary... ###
#########################################################


### Set directories for input/output files ###
## Tunable parameters [none]
set.dir(input=mothur/temp)


### Extract files from flowgram ###
## Tunable parameters [none]
sffinfo(sff=temp.sff, flow=T)
summary.seqs(fasta=temp.fasta)


### Separate each flowgram by primer/barcode
## Tunable parameters [pdiffs, bdiffs, minflows, maxflows, processors]
trim.flows(flow=temp.flow, oligos=temp.oligos, pdiffs=2, bdiffs=1, minflows=360, maxflows=720, processors=2)


### Mothur's implementation of Pyronoise
## Tunable parameters [processors]
shhh.flows(file=temp.flow.files, processors=2)


### Remove primer/barcode ####
## Tunable parameters [pdiffs, bdiffs, maxhomop, minlength, flip, processors]
trim.seqs(fasta=temp.shhh.fasta, name=temp.shhh.names, oligos=temp.oligos, pdiffs=2, bdiffs=1, maxhomop=8, minlength=200, flip=T, processors=2)


### Remove duplicates from fasta file ###
## Tunable parameters [none]
unique.seqs(fasta=temp.shhh.trim.fasta, name=temp.shhh.trim.names)
summary.seqs(fasta=temp.shhh.trim.unique.fasta, name=temp.shhh.trim.unique.names)


### Align seqs to silva reference alignment ###
## Tunable parameters [flip, threshold, processors]
align.seqs(candidate=temp.shhh.trim.unique.fasta, reference=mothur/reference/silva.seed_v119.align, flip=T, threshold=50, processors=2)


### Put sequences in same genetic space ###
## Tunable parameters [start, end, optimize, criteria, processors]
screen.seqs(fasta=temp.shhh.trim.unique.align, name=temp.shhh.trim.unique.names, group=temp.shhh.groups, optimize=start-end, criteria=95, processors=2)


### Filter positions with no sequence data ###
filter.seqs(fasta=temp.shhh.trim.unique.good.align, vertical=T, trump=., processors=2)


### Remove duplicates from fasta file ###
## Tunable parameters [none]
unique.seqs(fasta=temp.shhh.trim.unique.good.filter.fasta, name=temp.shhh.trim.unique.good.names)
summary.seqs(fasta=temp.shhh.trim.unique.good.filter.unique.fasta, name=temp.shhh.trim.unique.good.filter.names)


### Precluster ###
## Tunable parameters [diffs]
pre.cluster(fasta=temp.shhh.trim.unique.good.filter.unique.fasta, name=temp.shhh.trim.unique.good.filter.names, group=temp.shhh.good.groups, diffs=2)


### Remove chimeras ###
## Tunable parameters [none]
chimera.uchime(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.names, reference=self)
remove.seqs(accnos=temp.shhh.trim.unique.good.filter.unique.precluster.uchime.accnos, fasta=temp.shhh.trim.unique.good.filter.unique.precluster.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.names, group=temp.shhh.good.groups, dups=T)
summary.seqs(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.pick.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.names)


### Remove contaminants ###
## Tunable parameters [numwanted, taxon, processors]
classify.seqs(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.pick.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.names, group=temp.shhh.good.pick.groups, template=mothur/reference/gg_13_5_99.dkm.fasta, taxonomy=mothur/reference/gg_13_5_99.dkm.tax, method=knn, numwanted=1, processors=2)
remove.lineage(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.pick.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.names, group=temp.shhh.good.pick.groups, taxonomy=temp.shhh.trim.unique.good.filter.unique.precluster.pick.dkm.knn.taxonomy, taxon=unknown)
summary.seqs(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names)


### Phylotype ###
## Tunable parameters [none]
phylotype(taxonomy=temp.shhh.trim.unique.good.filter.unique.precluster.pick.dkm.knn.pick.taxonomy, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names, label=1)


### Make shared ###
## Tunable parameters [none]
make.shared(list=temp.shhh.trim.unique.good.filter.unique.precluster.pick.dkm.knn.pick.tx.list, group=temp.shhh.good.pick.pick.groups)


### Classify OTU ###
## Tunable parameters [none]
classify.otu(taxonomy=temp.shhh.trim.unique.good.filter.unique.precluster.pick.dkm.knn.pick.taxonomy, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names, group=temp.shhh.good.pick.pick.groups, list=temp.shhh.trim.unique.good.filter.unique.precluster.pick.dkm.knn.pick.tx.list)


### Final output files MUST be copied to the following output files
system(cp mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.fasta mothur/temp/final.fasta)
system(cp mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names mothur/temp/final.names)
system(cp mothur/temp/temp.shhh.good.pick.pick.groups mothur/temp/final.groups)
system(cp mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.dkm.knn.pick.tx.1.cons.taxonomy mothur/temp/final.taxonomy)
system(cp mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.dkm.knn.pick.tx.shared mothur/temp/final.shared)
