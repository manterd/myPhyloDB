#########################################################
###   Standard 454 Mothur batch file for myPhyloDB    ###
###  Tunable parameters may be changed as necessary.  ###
###                                                   ###
###   Advanced Mothur users, may wish to change the   ###
###   pipeline; however, please note that file names  ###
###       will need to changed accordingly.           ###
#########################################################


### Set directories for input/output files ###
## Tunable parameters [none]
set.dir(input=mothur/temp)


### Remove primer/barcode ####
## Tunable parameters [qaverage, pdiffs, bdiffs, maxhomop, minlength, flip, processors]
trim.seqs(fasta=temp.fasta, qfile=temp.qual, oligos=temp.oligos, qaverage=25, pdiffs=2, bdiffs=1, maxhomop=8, flip=T, minlength=200, processors=2)


### Remove duplicates from fasta file ###
## Tunable parameters [none]
unique.seqs(fasta=temp.trim.fasta)
summary.seqs(fasta=temp.trim.unique.fasta, name=temp.trim.names)


### Align seqs to silva reference alignment ###
## Tunable parameters [flip, threshold, processors]
align.seqs(candidate=temp.trim.unique.fasta, reference=mothur/reference/align/silva.seed_v119.align, flip=T, threshold=50, processors=2)


### Put sequences in same genetic space ###
## Tunable parameters [start, end, optimize, criteria, processors]
screen.seqs(fasta=temp.trim.unique.align, name=temp.trim.names, group=temp.groups, optimize=start-end, criteria=95, processors=2)


### Filter positions with no sequence data ###
filter.seqs(fasta=temp.trim.unique.good.align, vertical=T, trump=., processors=2)


### Remove duplicates from fasta file ###
## Tunable parameters [none]
unique.seqs(fasta=temp.trim.unique.good.filter.fasta, name=temp.trim.good.names)
summary.seqs(fasta=temp.trim.unique.good.filter.unique.fasta, name=temp.trim.unique.good.filter.names)


### Precluster ###
## Tunable parameters [diffs]
pre.cluster(fasta=temp.trim.unique.good.filter.unique.fasta, name=temp.trim.unique.good.filter.names, group=temp.good.groups, diffs=2)
summary.seqs(fasta=temp.trim.unique.good.filter.unique.precluster.fasta, name=temp.trim.unique.good.filter.unique.precluster.names, processors=2)


### Remove chimeras ###
## Tunable parameters [dereplicate]
chimera.uchime(fasta=temp.trim.unique.good.filter.unique.precluster.fasta, name=temp.trim.unique.good.filter.unique.precluster.names, reference=self, dereplicate=F)
remove.seqs(accnos=temp.trim.unique.good.filter.unique.precluster.uchime.accnos, fasta=temp.trim.unique.good.filter.unique.precluster.fasta, name=temp.trim.unique.good.filter.unique.precluster.names, group=temp.good.groups, dups=T)
summary.seqs(fasta=temp.trim.unique.good.filter.unique.precluster.pick.fasta, name=temp.trim.unique.good.filter.unique.precluster.pick.names)


### Remove contaminants ###
## Tunable parameters [method, taxon, processors]
classify.seqs(fasta=temp.trim.unique.good.filter.unique.precluster.pick.fasta, name=temp.trim.unique.good.filter.unique.precluster.pick.names, group=temp.good.pick.groups, template=mothur/reference/template/gg_13_5_99.fasta, taxonomy=mothur/reference/taxonomy/gg_13_5_99.pds.tax, method=wang, processors=2)
remove.lineage(fasta=temp.trim.unique.good.filter.unique.precluster.pick.fasta, name=temp.trim.unique.good.filter.unique.precluster.pick.names, group=temp.good.pick.groups, taxonomy=temp.trim.unique.good.filter.unique.precluster.pick.pds.wang.taxonomy, taxon=unknown)
summary.seqs(fasta=temp.trim.unique.good.filter.unique.precluster.pick.pick.fasta, name=temp.trim.unique.good.filter.unique.precluster.pick.pick.names)


### Phylotype ###
## Tunable parameters [none]
phylotype(taxonomy=temp.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, name=temp.trim.unique.good.filter.unique.precluster.pick.pick.names, label=1)


### Make shared ###
## Tunable parameters [none]
make.shared(list=temp.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.list, group=temp.good.pick.pick.groups)


### Classify OTU ###
## Tunable parameters [none]
classify.otu(taxonomy=temp.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, name=temp.trim.unique.good.filter.unique.precluster.pick.pick.names, group=temp.good.pick.pick.groups, list=temp.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.list)


### Final output files MUST be copied to the following output files
## Linux version
system(cp mothur/temp/temp.trim.unique.good.filter.unique.precluster.pick.pick.fasta mothur/temp/final.fasta)
system(cp mothur/temp/temp.trim.unique.good.filter.unique.precluster.pick.pick.names mothur/temp/final.names)
system(cp mothur/temp/temp.good.pick.pick.groups mothur/temp/final.groups)
system(cp mothur/temp/temp.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.1.cons.taxonomy mothur/temp/final.taxonomy)
system(cp mothur/temp/temp.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.shared mothur/temp/final.shared)

## Windows version
system(copy mothur\temp\temp.trim.unique.good.filter.unique.precluster.pick.pick.fasta mothur\temp\final.fasta)
system(copy mothur\temp\temp.trim.unique.good.filter.unique.precluster.pick.pick.names mothur\temp\final.names)
system(copy mothur\temp\temp.good.pick.pick.groups mothur\temp\final.groups)
system(copy mothur\temp\temp.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.1.cons.taxonomy mothur\temp\final.taxonomy)
system(copy mothur\temp\temp.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.shared mothur\temp\final.shared)
