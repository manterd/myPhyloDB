Linux version

Using ReadLine

Running 64Bit Version

mothur v.1.35.1
Last updated: 03/31/2015

by
Patrick D. Schloss

Department of Microbiology & Immunology
University of Michigan
pschloss@umich.edu
http://www.mothur.org

When using, please cite:
Schloss, P.D., et al., Introducing mothur: Open-source, platform-independent, community-supported software for describing and comparing microbial communities. Appl Environ Microbiol, 2009. 75(23):7537-41.

Distributed under the GNU General Public License

Type 'help()' for information on the commands that are available

Type 'quit()' to exit program
Batch Mode


mothur > set.dir(input=mothur/temp)
Mothur's directories:
inputDir=mothur/temp/

mothur > sffinfo(sff=temp.sff, flow=T)
Extracting info from mothur/temp/temp.sff ...
10000
12688
It took 4 secs to extract 12688.

Output File Names: 
mothur/temp/temp.fasta
mothur/temp/temp.qual
mothur/temp/temp.flow


mothur > summary.seqs(fasta=temp.fasta)

Using 1 processors.

		Start	End	NBases	Ambigs	Polymer	NumSeqs
Minimum:	1	39	39	0	2	1
2.5%-tile:	1	56	56	0	3	318
25%-tile:	1	327	327	0	4	3173
Median: 	1	350	350	0	4	6345
75%-tile:	1	356	356	0	5	9517
97.5%-tile:	1	368	368	0	6	12371
Maximum:	1	416	416	7	31	12688
Mean:	1	319.891	319.891	0.0230139	4.5041
# of Seqs:	12688

Output File Names: 
mothur/temp/temp.summary

It took 0 secs to summarize 12688 sequences.

mothur > trim.flows(flow=temp.flow, oligos=temp.oligos, pdiffs=2, bdiffs=1, minflows=360, maxflows=720, processors=6)

Using 6 processors.
2115
It took 0 secs to summarize 12688 sequences.

mothur > trim.flows(flow=temp.flow, oligos=temp.oligos, pdiffs=2, bdiffs=1, minflows=360, maxflows=720, processors=6)

Using 6 processors.
2115
It took 0 secs to summarize 12688 sequences.

mothur > trim.flows(flow=temp.flow, oligos=temp.oligos, pdiffs=2, bdiffs=1, minflows=360, maxflows=720, processors=6)

Using 6 processors.
2115
It took 0 secs to summarize 12688 sequences.

mothur > trim.flows(flow=temp.flow, oligos=temp.oligos, pdiffs=2, bdiffs=1, minflows=360, maxflows=720, processors=6)

Using 6 processors.
2114
It took 0 secs to summarize 12688 sequences.

mothur > trim.flows(flow=temp.flow, oligos=temp.oligos, pdiffs=2, bdiffs=1, minflows=360, maxflows=720, processors=6)

Using 6 processors.
2115
It took 0 secs to summarize 12688 sequences.

mothur > trim.flows(flow=temp.flow, oligos=temp.oligos, pdiffs=2, bdiffs=1, minflows=360, maxflows=720, processors=6)

Using 6 processors.
2114

Appending files from process 16060
Appending files from process 16061
Appending files from process 16062
Appending files from process 16063
Appending files from process 16064

Output File Names: 
mothur/temp/temp.trim.flow
mothur/temp/temp.scrap.flow
mothur/temp/temp.Test4.flow
mothur/temp/temp.Test5.flow
mothur/temp/temp.Test2.flow
mothur/temp/temp.Test1.flow
mothur/temp/temp.Test3.flow
mothur/temp/temp.flow.files


mothur > shhh.flows(file=temp.flow.files, processors=6)

Using 6 processors.

>>>>>	Processing mothur/temp/temp.Test5.flow (file 1 of 1)	<<<<<
Reading flowgrams...
Identifying unique flowgrams...
Calculating distances between flowgrams...

Total time: 0	0.768413

Clustering flowgrams...
********************#****#****#****#****#****#****#****#****#****#****#
Reading matrix:     |||||||||||||||||||||||||||||||||||||||||||||||||||

mothur > shhh.flows(file=temp.flow.files, processors=6)

Using 6 processors.

>>>>>	Processing mothur/temp/temp.Test1.flow (file 1 of 1)	<<<<<
Reading flowgrams...
Identifying unique flowgrams...
Calculating distances between flowgrams...

Total time: 0	0.901302

Clustering flowgrams...
********************#****#****#****#****#****#****#****#****#****#****#
Reading matrix:     |||||||||||||||||||||||||||||||||||||||||||||||||||

mothur > shhh.flows(file=temp.flow.files, processors=6)

Using 6 processors.

>>>>>	Processing mothur/temp/temp.Test4.flow (file 1 of 1)	<<<<<
Reading flowgrams...
Identifying unique flowgrams...
Calculating distances between flowgrams...

Total time: 1	1.41689

Clustering flowgrams...
********************#****#****#****#****#****#****#****#****#****#****#
Reading matrix:     |||||||||||||||||||||||||||||||||||||||||||||||||||

mothur > shhh.flows(file=temp.flow.files, processors=6)

Using 6 processors.

>>>>>	Processing mothur/temp/temp.Test2.flow (file 1 of 1)	<<<<<
Reading flowgrams...
Identifying unique flowgrams...
Calculating distances between flowgrams...

Total time: 1	1.41864

Clustering flowgrams...
********************#****#****#****#****#****#****#****#****#****#****#
Reading matrix:     |||||||||||||||||||||||||||||||||||||||||||||||||||

mothur > shhh.flows(file=temp.flow.files, processors=6)

Using 6 processors.

>>>>>	Processing mothur/temp/temp.Test3.flow (file 1 of 1)	<<<<<
Reading flowgrams...
Identifying unique flowgrams...
Calculating distances between flowgrams...

Total time: 1	1.47923

Clustering flowgrams...
********************#****#****#****#****#****#****#****#****#****#****#
Reading matrix:     |||||||||||||||||||||||||||||||||||||||||||||||||||
***********************************************************************

Denoising flowgrams...
iter	maxDelta	nLL		cycletime
1	18	-5173.32	0	0.599452
2	1.14266	729741	0	0.030872
3	0.220328	728834	0	0.030807
4	0.162538	728791	0	0.030781
5	0.128723	729569	0	0.030761
6	0.104304	729569	1	0.030865
7	0.0861625	729570	0	0.030773
8	0.0723209	729570	0	0.030752
9	0.0615267	729570	0	0.030785
10	0.0529521	729571	0	0.030807
11	0.0460311	729571	0	0.030774
12	0.0403665	729571	0	0.030779
13	0.035673	729571	0	0.030759
14	0.0317418	729571	0	0.030774
15	0.028417	729572	0	0.030775
16	0.0934688	729802	0	0.030763
17	0.0231416	729802	0	0.030749
18	0.0210296	729802	0	0.030732
19	0.0191887	729802	0	0.030754
20	0.0175747	729803	0	0.030758
21	0.0161519	729803	0	0.030732
22	0.0148913	729803	0	0.030763
23	0.0137693	729803	0	0.030747
24	0.0127664	729803	0	0.030742
25	0.0118663	729803	0	0.030737
26	0.0110554	729803	0	0.030747
27	0.0103225	729803	0	0.030745
28	0.00965787	729803	0	0.030757
29	0.00905329	729803	0	0.030852
30	0.00850178	729803	0	0.030756
31	0.00799734	729803	0	0.030728
32	0.00753476	729803	0	0.030759
33	0.00710957	729803	0	0.03075
34	0.00671786	729803	0	0.030721
35	0.00635621	729803	0	0.030715
36	0.00602164	729803	0	0.03077
37	0.00571152	729803	0	0.030756
38	0.00542355	729803	0	0.030764
39	0.00515566	729803	1	0.030774
40	0.00490605	729803	0	0.030737
41	0.0046731	729803	0	0.030752
42	0.00445536	729803	0	0.030729
43	0.00425155	729803	0	0.030748
44	0.00406051	729803	0	0.030712
45	0.00388121	729803	0	0.030733
46	0.0037127	729803	0	0.030758
47	0.00355415	729803	0	0.030699
48	0.00340479	729803	0	0.030721
49	0.00326394	729803	0	0.030744
50	0.00313095	729803	0	0.030709
51	0.00300527	729803	0	0.030742
52	0.00288638	729803	0	0.030734
53	0.00277379	729803	0	0.030723
54	0.00266708	729803	0	0.030757
55	0.00256584	729803	0	0.030753
56	0.00246972	729803	0	0.030728
57	0.00237838	729803	0	0.030725
58	0.00229152	729803	0	0.03072
59	0.00220884	729803	0	0.030713
60	0.00213009	729803	0	0.030727
61	0.00205502	729803	0	0.030715
62	0.00198342	729803	0	0.031163
63	0.00191508	729803	0	0.030716
64	0.00184981	729803	0	0.030698
65	0.0999975	729942	0	0.030763
66	0.00172776	729942	0	0.030675
67	0.00167067	729942	0	0.030706
68	0.00161602	729942	0	0.03071
69	0.00156365	729942	0	0.030729
70	0.00151347	729942	0	0.030708
71	0.00146533	729942	1	0.030755
72	0.00141915	729942	0	0.030693
73	0.00137482	729942	0	0.0307
74	0.00133224	729942	0	0.030669
75	0.00129133	729942	0	0.030673
76	0.00125199	729942	0	0.030663
77	0.00121417	729942	0	0.030667
78	0.00117777	729942	0	0.03066
79	0.00114273	729942	0	0.030668
80	0.001109	729942	0	0.030679
81	0.0010765	729942	0	0.030678
82	0.00104518	729942	0	0.030663
83	0.00101498	729942	0	0.030685
84	0.000985858	729942	0	0.030701
85	0.000957763	729942	0	0.030694
86	0.000930648	729942	0	0.030674
87	0.00090447	729942	0	0.030677
88	0.000879189	729942	0	0.030668
89	0.000854766	729942	0	0.030654
90	0.000831166	729942	0	0.030683
91	0.000808352	729942	0	0.030676
92	0.000786293	729942	0	0.030695
93	0.000764957	729942	0	0.030662
94	0.000744315	729942	0	0.030679
95	0.000724339	729942	0	0.030707
96	0.000705002	729942	0	0.030674
97	0.000686279	729942	0	0.030696
98	0.000668146	729942	0	0.030697
99	0.00065058	729942	0	0.030681
100	0.000633559	729942	0	0.030657
101	0.000617062	729942	0	0.03072
102	0.000601069	729942	0	0.030693
103	0.000585562	729942	0	0.030682
104	0.000570523	729942	1	0.030701
105	0.000555934	729942	0	0.030683
106	0.000541779	729942	0	0.030663
107	0.000528042	729942	0	0.03067
108	0.000514709	729942	0	0.030665
109	0.000501764	729942	0	0.030668
110	0.000489194	729942	0	0.030689
111	0.000476987	729942	0	0.030725
112	0.000465129	729942	0	0.030668
113	0.000453608	729942	0	0.030664
114	0.000442413	729942	0	0.030677
115	0.000431533	729942	0	0.030656
116	0.000420958	729942	0	0.030653
117	0.000410676	729942	0	0.030706
118	0.000400679	729942	0	0.030676
119	0.000390957	729942	0	0.030672
120	0.000381501	729942	0	0.030676
121	0.000372302	729942	0	0.030661
122	0.000363353	729942	0	0.030694
123	0.000354645	729942	0	0.030737
124	0.00034617	729942	0	0.030716
125	0.000337921	729942	0	0.030774
126	0.000329892	729942	0	0.030821
127	0.000322075	729942	0	0.030745
128	0.000314463	729942	0	0.030748
129	0.000307051	729942	0	0.030718
130	0.000299832	729942	0	0.030713
131	0.000292801	729942	0	0.030695
132	0.000285952	729942	0	0.039875
133	0.000279279	729942	0	0.046279
134	0.000272777	729942	0	0.049594
135	0.000266441	729942	1	0.049249
136	0.000260266	729942	0	0.045758
137	0.000254248	729942	0	0.044654
138	0.000248382	729942	0	0.030816
139	0.000242663	729942	0	0.030766
140	0.000237088	729942	0	0.030749
141	0.000231652	729942	0	0.030765
142	0.000226351	729942	0	0.031905
143	0.000221181	729942	0	0.034421
144	0.000216139	729942	0	0.032661
145	0.000211222	729942	0	0.049434
146	0.000206425	729942	0	0.049018
147	0.000201745	729942	0	0.048564
148	0.00019718	729942	0	0.048167
149	0.000192726	729942	0	0.049131
150	0.000188379	729942	0	0.04925
151	0.000184138	729942	0	0.049113
152	0.000179999	729942	0	0.048894
153	0.000175959	729942	0	0.03602
154	0.000172016	729942	0	0.030719
155	0.000168167	729942	0	0.0307
156	0.00016441	729942	0	0.030715
157	0.000160742	729942	0	0.030691
158	0.000157162	729942	0	0.03068
159	0.000153665	729942	0	0.030674
160	0.000150252	729942	0	0.030667
161	0.000146918	729942	1	0.030719
162	0.000143663	729942	0	0.030672
163	0.000140484	729942	0	0.030671
164	0.00013738	729942	0	0.030675
165	0.000134347	729942	0	0.030657
166	0.000131385	729942	0	0.030671
167	0.000128492	729942	0	0.030648
168	0.000125666	729942	0	0.030677
169	0.000122905	729942	0	0.030678
170	0.000120208	729942	0	0.030663
171	0.000117573	729942	0	0.030665
172	0.000114998	729942	0	0.030665
173	0.000112482	729942	0	0.030661
174	0.000110024	729942	0	0.030728
175	0.000107622	729942	0	0.030695
176	0.000105275	729942	0	0.030688
177	0.000102981	729942	0	0.030699
178	0.000100739	729942	0	0.030689
179	9.85482e-05	729942	0	0.030688
180	9.64068e-05	729942	0	0.030684
181	9.43138e-05	729942	0	0.030664
182	9.22679e-05	729942	0	0.030662
183	9.02681e-05	729942	0	0.030662
184	8.83133e-05	729942	0	0.030664
185	8.64024e-05	729942	0	0.030673
186	8.45342e-05	729942	0	0.030658
187	8.27079e-05	729942	0	0.030709
188	8.09224e-05	729942	0	0.030634
189	7.91768e-05	729942	0	0.030764
190	7.747e-05	729942	0	0.030758
191	7.58012e-05	729942	0	0.030631
192	7.41695e-05	729942	0	0.03065
193	7.25741e-05	729942	0	0.030804
194	7.10139e-05	729942	1	0.030697
195	6.94884e-05	729942	0	0.030791
196	6.79965e-05	729942	0	0.030747
197	6.65376e-05	729942	0	0.030687
198	6.51109e-05	729942	0	0.030599
199	6.37156e-05	729942	0	0.030651
200	6.2351e-05	729942	0	0.03063
201	6.10164e-05	729942	0	0.03055
202	5.97111e-05	729942	0	0.030567
203	5.84345e-05	729942	0	0.030635
204	5.71858e-05	729942	0	0.030626
205	5.59644e-05	729942	0	0.030685
206	5.47698e-05	729942	0	0.030709
207	5.36012e-05	729942	0	0.03069
208	5.24582e-05	729942	0	0.030705
209	5.134e-05	729942	0	0.030693
210	5.02463e-05	729942	0	0.030669
211	4.91763e-05	729942	0	0.030565
212	4.81296e-05	729942	0	0.030741
213	4.71056e-05	729942	0	0.030666
214	4.61039e-05	729942	0	0.030505
215	4.51239e-05	729942	0	0.030687
216	4.41651e-05	729942	0	0.030627
217	4.3227e-05	729942	0	0.030707
218	4.23093e-05	729942	0	0.030738
219	4.14114e-05	729942	0	0.030763
220	4.05329e-05	729942	0	0.030727
221	3.96734e-05	729942	0	0.030676
222	3.88324e-05	729942	0	0.030601
223	3.80095e-05	729942	0	0.030618
224	3.72044e-05	729942	0	0.030634
225	3.64165e-05	729942	0	0.030601
226	3.56457e-05	729942	1	0.030827
227	3.48914e-05	729942	0	0.030684
228	3.41533e-05	729942	0	0.030681
229	3.3431e-05	729942	0	0.030602
230	3.27242e-05	729942	0	0.030548
231	3.20326e-05	729942	0	0.030495
232	3.13559e-05	729942	0	0.030625
233	3.06936e-05	729942	0	0.030493
234	3.00454e-05	729942	0	0.030426
235	2.94112e-05	729942	0	0.030465
236	2.87905e-05	729942	0	0.030621
237	2.81831e-05	729942	0	0.030559
238	2.75886e-05	729942	0	0.030594
239	2.70069e-05	729942	0	0.030585
240	2.64375e-05	729942	0	0.030577
241	2.58803e-05	729942	0	0.030637
242	2.5335e-05	729942	0	0.030537
243	2.48012e-05	729942	0	0.030694
244	2.42789e-05	729942	0	0.030426
245	2.37677e-05	729942	0	0.030561
246	2.32673e-05	729942	0	0.030452
***********************************************************************

Denoising flowgrams...
iter	maxDelta	nLL		cycletime
1	12	-5437.16	0	0.652385
2	2.28571	780999	0	0.033118
3	0.979595	781304	1	0.032984
4	0.419826	781304	0	0.032977
5	0.179925	781303	0	0.033021
6	0.0905924	781025	0	0.032928
7	0.0578332	781673	0	0.032959
8	0.0372103	781673	0	0.033015
9	0.0308098	781673	0	0.032903
10	0.0258625	781673	0	0.032907
11	0.0219728	781674	0	0.032974
12	0.0188671	781674	0	0.032829
13	0.0940883	781645	0	0.032948
14	0.0142915	781645	0	0.032877
15	0.0125827	781645	0	0.032991
16	0.0111517	781645	0	0.033139
17	0.00994221	781645	0	0.033043
18	0.00891147	781646	0	0.032923
19	0.00802637	781646	0	0.033041
20	0.00726106	781646	0	0.033028
21	0.00659513	781646	0	0.032907
22	0.00601228	781646	0	0.033053
23	0.00549941	781646	0	0.033026
24	0.00504588	781646	0	0.035495
25	0.00464298	781646	0	0.033207
26	0.00428353	781646	0	0.033241
27	0.00396157	781646	0	0.033916
28	0.00367212	781646	0	0.033142
29	0.00341101	781646	0	0.033017
30	0.0031747	781646	0	0.032974
31	0.00296018	781646	0	0.033107
32	0.00276489	781646	0	0.033073
33	0.00258664	781646	1	0.032925
34	0.00242352	781646	0	0.033083
35	0.0022739	781646	0	0.033006
36	0.00213636	781646	0	0.032917
37	0.00200964	781646	0	0.033043
38	0.00189267	781646	0	0.032996
39	0.0017845	781646	0	0.03292
40	0.00168427	781646	0	0.033019
41	0.00159125	781646	0	0.032983
42	0.00150478	781646	0	0.032894
43	0.00142427	781646	0	0.033035
44	0.0013492	781646	0	0.032813
45	0.00127912	781646	0	0.033084
46	0.00121359	781646	0	0.033056
47	0.00115225	781646	0	0.032962
48	0.00109476	781646	0	0.033032
49	0.00104081	781646	0	0.032992
50	0.000990136	781646	0	0.032878
51	0.000942484	781646	0	0.033024
52	0.000897628	781646	0	0.032971
53	0.000855365	781646	0	0.032858
54	0.000815508	781646	0	0.035496
55	0.000777887	781646	0	0.033205
56	0.000742346	781646	0	0.032961
57	0.000708743	781646	0	0.033317
58	0.000676948	781646	0	0.033684
59	0.000646842	781646	0	0.032851
60	0.000618313	781646	0	0.032988
61	0.000591262	781646	0	0.032997
62	0.000565595	781646	0	0.032904
63	0.000541225	781646	1	0.032994
64	0.000518074	781646	0	0.032976
65	0.000496067	781646	0	0.032828
66	0.000475136	781646	0	0.033002
67	0.000455218	781646	0	0.032798
68	0.000436254	781646	0	0.03299
69	0.000418191	781646	0	0.03296
70	0.000400975	781646	0	0.03288
71	0.000384561	781646	0	0.033017
72	0.000368905	781646	0	0.03296
73	0.000353964	781646	0	0.032844
74	0.000339701	781646	0	0.033021
75	0.000326079	781646	0	0.032954
76	0.000313065	781646	0	0.032859
77	0.000300627	781646	0	0.033015
78	0.000288735	781646	0	0.032947
79	0.000277362	781646	0	0.032824
80	0.000266482	781646	0	0.032982
81	0.000256069	781646	0	0.032917
82	0.000246102	781646	0	0.032849
83	0.000236557	781646	0	0.032998
84	0.000227415	781646	0	0.036026
85	0.000218656	781646	0	0.032966
86	0.000210263	781646	0	0.03318
87	0.000202217	781646	0	0.033977
88	0.000194503	781646	0	0.032911
89	0.000187105	781646	0	0.032986
90	0.000180009	781646	0	0.032966
91	0.0001732	781646	0	0.032834
92	0.000166667	781646	0	0.032996
93	0.000160396	781646	1	0.032942
94	0.000154376	781646	0	0.032802
95	0.000148596	781646	0	0.03298
96	0.000143046	781646	0	0.03294
97	0.000137714	781646	0	0.032822
98	0.000132592	781646	0	0.032977
99	0.000127671	781646	0	0.03521
100	0.000122942	781646	0	0.032831
101	0.000118397	781646	0	0.032976
102	0.000114028	781646	0	0.032942
103	0.000109828	781646	0	0.032817
104	0.00010579	781646	0	0.03299
105	0.000101907	781646	0	0.032962
106	9.81719e-05	781646	0	0.032874
107	9.45796e-05	781646	0	0.033015
108	9.11241e-05	781646	0	0.032978
109	8.77996e-05	781646	0	0.032819
110	8.46009e-05	781646	0	0.033032
111	8.15229e-05	781646	0	0.033
112	7.85607e-05	781646	0	0.032873
113	7.57098e-05	781646	0	0.03308
114	7.29657e-05	781646	0	0.032892
115	7.03242e-05	781646	0	0.03286
116	6.77811e-05	781646	0	0.032789
117	6.53328e-05	781646	0	0.032825
118	6.29753e-05	781646	0	0.032784
119	6.07052e-05	781646	0	0.032787
120	5.85191e-05	781646	0	0.034111
121	5.64137e-05	781646	0	0.032859
122	5.4386e-05	781646	0	0.042523
123	5.24328e-05	781646	1	0.036985
124	5.05514e-05	781646	0	0.034673
125	4.8739e-05	781646	0	0.038011
126	4.69929e-05	781646	0	0.036013
127	4.53107e-05	781646	0	0.033982
128	4.36899e-05	781646	0	0.033976
129	4.21282e-05	781646	0	0.033242
130	4.06234e-05	781646	0	0.033021
131	3.91733e-05	781646	0	0.033991
132	3.77758e-05	781646	0	0.034472
133	3.6429e-05	781646	0	0.041163
134	3.5131e-05	781646	0	0.032855
135	3.388e-05	781646	0	0.033217
136	3.26742e-05	781646	0	0.032881
137	3.1512e-05	781646	0	0.034089
138	3.03916e-05	781646	0	0.032819
139	2.93116e-05	781646	0	0.032771
140	2.82706e-05	781646	0	0.032731
141	2.72669e-05	781646	0	0.032788
142	2.62993e-05	781646	0	0.032732
143	2.53665e-05	781646	0	0.032739
144	2.44671e-05	781646	0	0.032763
145	2.36e-05	781646	0	0.032764
146	2.27639e-05	781646	0	0.032785
147	2.19577e-05	781646	0	0.032741
148	2.11804e-05	781646	0	0.032721
149	2.04309e-05	781646	0	0.032713
150	1.97081e-05	781646	0	0.032738
151	1.90111e-05	781646	0	0.032716
152	1.8339e-05	781646	0	0.032716
153	1.76908e-05	781646	1	0.032724
154	1.70657e-05	781646	0	0.032738
155	1.64629e-05	781646	0	0.032738
156	1.58816e-05	781646	0	0.032735
157	1.53209e-05	781646	0	0.032728
158	1.47801e-05	781646	0	0.032713
159	1.42586e-05	781646	0	0.03272
160	1.37556e-05	781646	0	0.032718
161	1.32704e-05	781646	0	0.032699
162	1.28025e-05	781646	0	0.032714
163	1.23511e-05	781646	0	0.032712
164	1.19158e-05	781646	0	0.03272
165	1.14958e-05	781646	0	0.032734
166	1.10908e-05	781646	0	0.032785
167	1.07001e-05	781646	0	0.03275
168	1.03232e-05	781646	0	0.032749
169	9.95967e-06	781646	0	0.032719
170	9.609e-06	781646	0	0.032723
171	9.27072e-06	781646	0	0.032717
172	8.94441e-06	781646	0	0.032685
173	8.62962e-06	781646	0	0.032702
174	8.32596e-06	781646	0	0.032731
175	8.03303e-06	781646	0	0.032712
176	7.75044e-06	781646	0	0.032725
177	7.47782e-06	781646	0	0.03273
178	7.21483e-06	781646	0	0.032731
179	6.96111e-06	781646	0	0.032836
180	6.71635e-06	781646	0	0.032783
181	6.48022e-06	781646	0	0.032672
182	6.25241e-06	781646	0	0.032716
183	6.03264e-06	781646	1	0.032811
184	5.82061e-06	781646	0	0.032829
185	5.61606e-06	781646	0	0.032866
186	5.41871e-06	781646	0	0.032778
187	5.22832e-06	781646	0	0.032726
188	5.04463e-06	781646	0	0.032613
189	4.8674e-06	781646	0	0.032654
190	4.69642e-06	781646	0	0.032644
191	4.53146e-06	781646	0	0.032596
192	4.3723e-06	781646	0	0.032756
193	4.21875e-06	781646	0	0.032688
194	4.0706e-06	781646	0	0.03273
195	3.92766e-06	781646	0	0.032757
196	3.78975e-06	781646	0	0.032747
197	3.65669e-06	781646	0	0.032796
198	3.5283e-06	781646	0	0.032758
199	3.40444e-06	781646	0	0.032643
200	3.28493e-06	781646	0	0.032726
201	3.16962e-06	781646	0	0.032769
202	3.05836e-06	781646	0	0.032653
203	2.95102e-06	781646	0	0.03266
204	2.84745e-06	781646	0	0.032686
205	2.74751e-06	781646	0	0.032787
206	2.65109e-06	781646	0	0.032734
207	2.55806e-06	781646	0	0.032845
208	2.4683e-06	781646	0	0.032743
209	2.38168e-06	781646	0	0.032707
210	2.29812e-06	781646	0	0.032684
211	2.21748e-06	781646	0	0.032648
212	2.13968e-06	781646	0	0.032678
213	2.06461e-06	781646	0	0.032637
214	1.99218e-06	781646	1	0.032901
215	1.92229e-06	781646	0	0.032762
216	1.85486e-06	781646	0	0.032688
217	1.78979e-06	781646	0	0.032598
218	1.72701e-06	781646	0	0.032558
219	1.66643e-06	781646	0	0.032609
220	1.60797e-06	781646	0	0.032564
221	1.55157e-06	781646	0	0.032502
222	1.49715e-06	781646	0	0.032485
223	1.44464e-06	781646	0	0.032663
224	1.39397e-06	781646	0	0.032605
225	1.34508e-06	781646	0	0.032627
226	1.29791e-06	781646	0	0.032621
227	1.25239e-06	781646	0	0.032681
228	1.20847e-06	781646	0	0.032708
229	1.16609e-06	781646	0	0.032647
230	1.1252e-06	781646	0	0.032595
231	1.08574e-06	781646	0	0.032594
232	1.04767e-06	781646	0	0.032533
233	1.01093e-06	781646	0	0.032428
234	9.75479e-07	781646	0	0.032577

Finalizing...
Total time to process mothur/temp/temp.Test3.flow:	8	8.60197

Output File Names: 
mothur/temp/temp.Test3.shhh.qual
mothur/temp/temp.Test3.shhh.fasta
mothur/temp/temp.Test3.shhh.names
mothur/temp/temp.Test3.shhh.counts
mothur/temp/temp.Test3.shhh.groups
mothur/temp/temp.shhh.fasta
mothur/temp/temp.shhh.names


mothur > trim.seqs(fasta=temp.shhh.fasta, name=temp.shhh.names, oligos=temp.oligos, pdiffs=2, bdiffs=1, maxhomop=8, minlength=200, flip=T, processors=6)

Using 6 processors.
753

mothur > trim.seqs(fasta=temp.shhh.fasta, name=temp.shhh.names, oligos=temp.oligos, pdiffs=2, bdiffs=1, maxhomop=8, minlength=200, flip=T, processors=6)

Using 6 processors.
753

mothur > trim.seqs(fasta=temp.shhh.fasta, name=temp.shhh.names, oligos=temp.oligos, pdiffs=2, bdiffs=1, maxhomop=8, minlength=200, flip=T, processors=6)

Using 6 processors.
760

mothur > trim.seqs(fasta=temp.shhh.fasta, name=temp.shhh.names, oligos=temp.oligos, pdiffs=2, bdiffs=1, maxhomop=8, minlength=200, flip=T, processors=6)

Using 6 processors.
754

mothur > trim.seqs(fasta=temp.shhh.fasta, name=temp.shhh.names, oligos=temp.oligos, pdiffs=2, bdiffs=1, maxhomop=8, minlength=200, flip=T, processors=6)

Using 6 processors.
753

mothur > trim.seqs(fasta=temp.shhh.fasta, name=temp.shhh.names, oligos=temp.oligos, pdiffs=2, bdiffs=1, maxhomop=8, minlength=200, flip=T, processors=6)

Using 6 processors.
755
Appending files from process 16078
Appending files from process 16079
Appending files from process 16080
Appending files from process 16081
Appending files from process 16082

Group count: 
Test1	904
Test2	1148
Test3	1248
Test4	1196
Test5	818
Total of all groups is 5314

Output File Names: 
mothur/temp/temp.shhh.trim.fasta
mothur/temp/temp.shhh.scrap.fasta
mothur/temp/temp.shhh.trim.names
mothur/temp/temp.shhh.scrap.names
mothur/temp/temp.shhh.groups


mothur > unique.seqs(fasta=temp.shhh.trim.fasta, name=temp.shhh.trim.names)
4522	4213

Output File Names: 
mothur/temp/temp.shhh.trim.unique.names
mothur/temp/temp.shhh.trim.unique.fasta


mothur > summary.seqs(fasta=temp.shhh.trim.unique.fasta, name=temp.shhh.trim.unique.names)

Using 6 processors.

		Start	End	NBases	Ambigs	Polymer	NumSeqs
Minimum:	1	200	200	0	3	1
2.5%-tile:	1	282	282	0	3	133
25%-tile:	1	308	308	0	4	1329
Median: 	1	324	324	0	5	2658
75%-tile:	1	327	327	0	5	3986
97.5%-tile:	1	339	339	0	6	5182
Maximum:	1	388	388	0	8	5314
Mean:	1	317.629	317.629	0	4.62269
# of unique seqs:	4213
total # of seqs:	5314

Output File Names: 
mothur/temp/temp.shhh.trim.unique.summary

It took 0 secs to summarize 5314 sequences.

mothur > align.seqs(candidate=temp.shhh.trim.unique.fasta, reference=mothur/reference/align/silva.seed_v119.align, flip=T, threshold=50, processors=6)

Using 6 processors.

Reading in the mothur/reference/align/silva.seed_v119.align template sequences...	DONE.
It took 14 to read  15009 sequences.
Aligning sequences from mothur/temp/temp.shhh.trim.unique.fasta ...
Some of you sequences generated alignments that eliminated too many bases, a list is provided in mothur/temp/temp.shhh.trim.unique.flip.accnos. If the reverse compliment proved to be better it was reported.
It took 13 secs to align 4213 sequences.


Output File Names: 
mothur/temp/temp.shhh.trim.unique.align
mothur/temp/temp.shhh.trim.unique.align.report
mothur/temp/temp.shhh.trim.unique.flip.accnos


mothur > screen.seqs(fasta=temp.shhh.trim.unique.align, name=temp.shhh.trim.unique.names, group=temp.shhh.groups, optimize=start-end, criteria=95, processors=6)

Using 6 processors.
Optimizing start to 1046.
Optimizing end to 6388.

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.align
mothur/temp/temp.shhh.trim.unique.bad.accnos
mothur/temp/temp.shhh.trim.unique.good.names
mothur/temp/temp.shhh.good.groups


It took 2 secs to screen 4213 sequences.

mothur > filter.seqs(fasta=temp.shhh.trim.unique.good.align, vertical=T, trump=., processors=6)

Using 6 processors.
Creating Filter... 


Running Filter... 



Length of filtered alignment: 712
Number of columns removed: 49288
Length of the original alignment: 50000
Number of sequences used to construct filter: 3897

Output File Names: 
mothur/temp/temp.filter
mothur/temp/temp.shhh.trim.unique.good.filter.fasta


mothur > unique.seqs(fasta=temp.shhh.trim.unique.good.filter.fasta, name=temp.shhh.trim.unique.good.names)
3897	3793

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.names
mothur/temp/temp.shhh.trim.unique.good.filter.unique.fasta


mothur > summary.seqs(fasta=temp.shhh.trim.unique.good.filter.unique.fasta, name=temp.shhh.trim.unique.good.filter.names)

Using 6 processors.

		Start	End	NBases	Ambigs	Polymer	NumSeqs
Minimum:	1	711	271	0	3	1
2.5%-tile:	1	712	279	0	3	124
25%-tile:	1	712	293	0	4	1238
Median: 	1	712	307	0	5	2475
75%-tile:	1	712	311	0	5	3712
97.5%-tile:	1	712	322	0	6	4826
Maximum:	1	712	339	0	8	4949
Mean:	1	711.993	303.066	0	4.61649
# of unique seqs:	3793
total # of seqs:	4949

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.summary

It took 0 secs to summarize 4949 sequences.

mothur > pre.cluster(fasta=temp.shhh.trim.unique.good.filter.unique.fasta, name=temp.shhh.trim.unique.good.filter.names, group=temp.shhh.good.groups, diffs=2)

Using 6 processors.

Processing group Test2:
It took 0 secs to summarize 4949 sequences.

mothur > pre.cluster(fasta=temp.shhh.trim.unique.good.filter.unique.fasta, name=temp.shhh.trim.unique.good.filter.names, group=temp.shhh.good.groups, diffs=2)

Using 6 processors.

Processing group Test3:
It took 0 secs to summarize 4949 sequences.

mothur > pre.cluster(fasta=temp.shhh.trim.unique.good.filter.unique.fasta, name=temp.shhh.trim.unique.good.filter.names, group=temp.shhh.good.groups, diffs=2)

Using 6 processors.

Processing group Test1:
It took 0 secs to summarize 4949 sequences.

mothur > pre.cluster(fasta=temp.shhh.trim.unique.good.filter.unique.fasta, name=temp.shhh.trim.unique.good.filter.names, group=temp.shhh.good.groups, diffs=2)

Using 6 processors.

Processing group Test4:
It took 0 secs to summarize 4949 sequences.

mothur > pre.cluster(fasta=temp.shhh.trim.unique.good.filter.unique.fasta, name=temp.shhh.trim.unique.good.filter.names, group=temp.shhh.good.groups, diffs=2)

Using 6 processors.

Processing group Test5:
625	576	49
Total number of sequences before pre.cluster was 625.
pre.cluster removed 49 sequences.

It took 0 secs to cluster 625 sequences.
710	646	64
Total number of sequences before pre.cluster was 710.
pre.cluster removed 64 sequences.

It took 0 secs to cluster 710 sequences.
853	767	86
Total number of sequences before pre.cluster was 853.
pre.cluster removed 86 sequences.

919	826	93
Total number of sequences before pre.cluster was 919.
pre.cluster removed 93 sequences.

It took 0 secs to cluster 853 sequences.
It took 0 secs to cluster 919 sequences.
957	855	102
Total number of sequences before pre.cluster was 957.
pre.cluster removed 102 sequences.

It took 0 secs to cluster 957 sequences.

/******************************************/
Running command: unique.seqs(fasta=mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.fasta, name=mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.names)
3670	3486

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.unique.names
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.unique.fasta

/******************************************/
It took 0 secs to run pre.cluster.

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.fasta
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.names
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.Test1.map
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.Test2.map
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.Test3.map
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.Test4.map
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.Test5.map


mothur > summary.seqs(fasta=shhh.trim.unique.good.filter.unique.precluster.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.names, processors=6)
Unable to open mothur/temp/shhh.trim.unique.good.filter.unique.precluster.fasta

Using 6 processors.
[ERROR]: did not complete summary.seqs.

mothur > chimera.uchime(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.names, reference=self, dereplicate=F)

Using 6 processors.

uchime by Robert C. Edgar
http://drive5.com/uchime
This code is donated to the public domain.

Checking sequences from mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.fasta ...
When using template=self, mothur can only use 1 processor, continuing.

It took 52 secs to check 3486 sequences. 412 chimeras were found.

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.uchime.chimeras
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.uchime.accnos


mothur > remove.seqs(accnos=temp.shhh.trim.unique.good.filter.unique.precluster.uchime.accnos, fasta=temp.shhh.trim.unique.good.filter.unique.precluster.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.names, group=temp.shhh.good.groups, dups=T)
Removed 447 sequences from your name file.
Removed 412 sequences from your fasta file.
Removed 447 sequences from your group file.

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.names
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.fasta
mothur/temp/temp.shhh.good.pick.groups


mothur > summary.seqs(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.pick.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.names)

Using 6 processors.

		Start	End	NBases	Ambigs	Polymer	NumSeqs
Minimum:	1	711	271	0	3	1
2.5%-tile:	1	712	279	0	3	113
25%-tile:	1	712	293	0	4	1126
Median: 	1	712	307	0	5	2252
75%-tile:	1	712	311	0	5	3377
97.5%-tile:	1	712	322	0	6	4390
Maximum:	1	712	339	0	8	4502
Mean:	1	711.993	303.045	0	4.61239
# of unique seqs:	3074
total # of seqs:	4502

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.summary

It took 0 secs to summarize 4502 sequences.

mothur > classify.seqs(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.pick.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.names, group=temp.shhh.good.pick.groups, template=mothur/reference/template/gg_13_5_99.fasta, taxonomy=mothur/reference/taxonomy/gg_13_5_99.pds.tax, method=wang, processors=6)

Using 6 processors.
Generating search database...    DONE.
It took 87 seconds generate search database. 

Reading in the mothur/reference/taxonomy/gg_13_5_99.pds.tax taxonomy...	DONE.
Calculating template taxonomy tree...     DONE.
Calculating template probabilities...     DONE.
It took 401 seconds get probabilities. 
Classifying sequences from mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.fasta ...

It took 9 secs to classify 3074 sequences.

Reading mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.names...  Done.

It took 0 secs to create the summary file for 3074 sequences.


Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.taxonomy
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.tax.summary


mothur > remove.lineage(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.pick.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.names, group=temp.shhh.good.pick.groups, taxonomy=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.taxonomy, taxon=unknown)

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.fasta
mothur/temp/temp.shhh.good.pick.pick.groups


mothur > summary.seqs(fasta=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.fasta, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names)

Using 6 processors.

		Start	End	NBases	Ambigs	Polymer	NumSeqs
Minimum:	1	711	271	0	3	1
2.5%-tile:	1	712	279	0	3	113
25%-tile:	1	712	293	0	4	1126
Median: 	1	712	307	0	5	2252
75%-tile:	1	712	311	0	5	3377
97.5%-tile:	1	712	322	0	6	4390
Maximum:	1	712	339	0	8	4502
Mean:	1	711.993	303.045	0	4.61239
# of unique seqs:	3074
total # of seqs:	4502

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.summary

It took 0 secs to summarize 4502 sequences.

mothur > phylotype(taxonomy=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names, label=1)
1

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.sabund
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.rabund
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.list


mothur > make.shared(list=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.list, group=temp.shhh.good.pick.pick.groups)
1

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.shared
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.Test1.rabund
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.Test2.rabund
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.Test3.rabund
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.Test4.rabund
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.Test5.rabund


mothur > classify.otu(taxonomy=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, name=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names, group=temp.shhh.good.pick.pick.groups, list=temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.list)
reftaxonomy is not required, but if given will keep the rankIDs in the summary file static.
1	362

Output File Names: 
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.1.cons.taxonomy
mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.1.cons.tax.summary


mothur > system(cp mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.fasta mothur/temp/final.fasta)


mothur > system(cp mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names mothur/temp/final.names)


mothur > system(cp mothur/temp/temp.shhh.good.pick.pick.groups mothur/temp/final.groups)


mothur > system(cp mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.1.cons.taxonomy mothur/temp/final.taxonomy)


mothur > system(cp mothur/temp/temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.shared mothur/temp/final.shared)


mothur > system(copy mothur\temp\temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.fasta mothur\temp\final.fasta)
sh: 1: copy: not found


mothur > system(copy mothur\temp\temp.shhh.trim.unique.good.filter.unique.precluster.pick.pick.names mothur\temp\final.names)
sh: 1: copy: not found


mothur > system(copy mothur\temp\temp.shhh.good.pick.pick.groups mothur\temp\final.groups)
sh: 1: copy: not found


mothur > system(copy mothur\temp\temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.1.cons.taxonomy mothur\temp\final.taxonomy)
sh: 1: copy: not found


mothur > system(copy mothur\temp\temp.shhh.trim.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.shared mothur\temp\final.shared)
sh: 1: copy: not found


mothur > quit()
