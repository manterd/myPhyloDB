#########################################################
###   Standard 454 Mothur batch file for myPhyloDB    ###
###  Tunable parameters may be changed as necessary.  ###
###                                                   ###
###   Advanced Mothur users, may wish to change the   ###
###   pipeline; however, please note that file names  ###
###       will need to be changed accordingly.        ###
#########################################################


### Set directories for input/output files ###
## Tunable parameters [none]
set.dir(input=mothur/temp)


### Extract files from flowgram, shhh.flows, trim, and merge ###
## Tunable parameters [minflows, maxflows, bdiffs, pdiffs, ldiffs, sdiffs, tdiffs, signal, noise, maxhomop, order, maxiter, mindelta, cutoff, sigma, minlength, maxlength, keepfirst, removelast, allfiles, keepforward, processors]

sff.multiple(file=temp.txt, order=A, minflows=360, bdiffs=1, pdiffs=3, maxhomop=8, minlength=200, maxiter=10, processors=10)


### Remove duplicates from fasta file ###
## Tunable parameters [none]

unique.seqs(fasta=temp.fasta, name=temp.names)

summary.seqs(fasta=temp.unique.fasta, name=temp.unique.names)


### Align seqs to silva reference alignment ###
## Tunable parameters [flip, threshold, processors]

align.seqs(candidate=temp.unique.fasta, reference=mothur/reference/align/silva.seed_v119.align, flip=T, threshold=50, processors=10)


### Put sequences in same genetic space ###
## Tunable parameters [start, end, optimize, criteria, processors]

screen.seqs(fasta=temp.unique.align, name=temp.unique.names, group=temp.groups, optimize=start-end, criteria=95, processors=10)


### Filter positions with no sequence data ###

filter.seqs(fasta=temp.unique.good.align, vertical=T, trump=., processors=10)


### Remove duplicates from fasta file ###
## Tunable parameters [none]

unique.seqs(fasta=temp.unique.good.filter.fasta, name=temp.unique.good.names)

summary.seqs(fasta=temp.unique.good.filter.unique.fasta, name=temp.unique.good.filter.names)


### Precluster ###
## Tunable parameters [diffs]

pre.cluster(fasta=temp.unique.good.filter.unique.fasta, name=temp.unique.good.filter.names, group=temp.good.groups, diffs=2)

summary.seqs(fasta=unique.good.filter.unique.precluster.fasta, name=temp.unique.good.filter.unique.precluster.names, processors=10)


### Remove chimeras ###
## Tunable parameters [dereplicate]

chimera.uchime(fasta=temp.unique.good.filter.unique.precluster.fasta, name=temp.unique.good.filter.unique.precluster.names, reference=self, dereplicate=F)

remove.seqs(accnos=temp.unique.good.filter.unique.precluster.uchime.accnos, fasta=temp.unique.good.filter.unique.precluster.fasta, name=temp.unique.good.filter.unique.precluster.names, group=temp.good.groups, dups=T)

summary.seqs(fasta=temp.unique.good.filter.unique.precluster.pick.fasta, name=temp.unique.good.filter.unique.precluster.pick.names)


### Remove contaminants ###
## Tunable parameters [method, taxon, processors]

classify.seqs(fasta=temp.unique.good.filter.unique.precluster.pick.fasta, name=temp.unique.good.filter.unique.precluster.pick.names, group=temp.good.pick.groups, template=mothur/reference/template/gg_13_5_99.fasta, taxonomy=mothur/reference/taxonomy/gg_13_5_99.pds.tax, method=wang, processors=10)

remove.lineage(fasta=temp.unique.good.filter.unique.precluster.pick.fasta, name=temp.unique.good.filter.unique.precluster.pick.names, group=temp.good.pick.groups, taxonomy=temp.unique.good.filter.unique.precluster.pick.pds.wang.taxonomy, taxon=unknown)

summary.seqs(fasta=temp.unique.good.filter.unique.precluster.pick.pick.fasta, name=temp.unique.good.filter.unique.precluster.pick.pick.names)


### Phylotype ###
## Tunable parameters [none]

phylotype(taxonomy=temp.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, name=temp.unique.good.filter.unique.precluster.pick.pick.names, label=1)


### Make shared ###
## Tunable parameters [none]

make.shared(list=temp.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.list, group=temp.good.pick.pick.groups)


### Classify OTU ###
## Tunable parameters [none]

classify.otu(taxonomy=temp.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, name=temp.unique.good.filter.unique.precluster.pick.pick.names, group=temp.good.pick.pick.groups, list=temp.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.list, reftaxonomy=mothur/reference/taxonomy/gg_13_5_99.pds.tax)


### Final output files MUST be copied to the following output files
## Linux version

system(cp mothur/temp/temp.unique.good.filter.unique.precluster.pick.pick.fasta mothur/temp/final.fasta)

system(cp mothur/temp/temp.unique.good.filter.unique.precluster.pick.pick.names mothur/temp/final.names)

system(cp mothur/temp/temp.good.pick.pick.groups mothur/temp/final.groups)

system(cp mothur/temp/temp.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.1.cons.taxonomy mothur/temp/final.taxonomy)

system(cp mothur/temp/temp.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.shared mothur/temp/final.shared)

## Windows version

system(copy mothur\temp\temp.unique.good.filter.unique.precluster.pick.pick.fasta mothur\temp\final.fasta)

system(copy mothur\temp\temp.unique.good.filter.unique.precluster.pick.pick.names mothur\temp\final.names)

system(copy mothur\temp\temp.good.pick.pick.groups mothur\temp\final.groups)

system(copy mothur\temp\temp.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.1.cons.taxonomy mothur\temp\final.taxonomy)

system(copy mothur\temp\temp.unique.good.filter.unique.precluster.pick.pds.wang.pick.tx.shared mothur\temp\final.shared)


